<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>搭建博客</title>
      <link href="/2023/03/22/build-block/"/>
      <url>/2023/03/22/build-block/</url>
      
        <content type="html"><![CDATA[<h1 id="新搭建的博客文章"><a href="#新搭建的博客文章" class="headerlink" title="新搭建的博客文章"></a>新搭建的博客文章</h1><p>测试一下:)</p><h1 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h1><h2 id="标题2"><a href="#标题2" class="headerlink" title="标题2"></a>标题2</h2><p>……</p><h6 id="标题6"><a href="#标题6" class="headerlink" title="标题6"></a>标题6</h6><p>（总共有六级标题，#与文字之间要有空格）</p><p>我是<strong>加粗</strong>文字</p><p>我是<em>斜体</em>文字 ^1b514e</p><p>我是<del>删除线</del></p><p><u>我是下划线</u> </p><ol><li>aa<ol><li>bb<ol><li>cc</li></ol></li></ol></li></ol><ul><li>hello<ul><li>hi</li></ul></li></ul><p>（列表可以用Tab键来进行缩进）</p><blockquote><p>我是一个<strong>引用</strong></p></blockquote><p>^5ddc89</p><hr><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Hello Markdown"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（代码：英文波浪号那里的三个小点，后面加上语言名称可以高亮）</p><ul><li><p><input disabled="" type="checkbox"> 代办事项（“- 空格 [ 空格 ] 空格 代办事项”）</p></li><li><p><input checked="" disabled="" type="checkbox"> （将方括号内的空格改成x，即为已完成的待办事项）</p></li></ul><p>（可以用快捷键Ctrl+l来创建）</p><table><thead><tr><th align="left">左对齐</th><th align="center">中间</th><th align="right">右对齐</th></tr></thead><tbody><tr><td align="left">单</td><td align="center">元</td><td align="right">格</td></tr><tr><td align="left">单元格</td><td align="center">单元格</td><td align="right">单元格</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>qemu+gdb</title>
      <link href="/2023/03/22/qemu-gdb/"/>
      <url>/2023/03/22/qemu-gdb/</url>
      
        <content type="html"><![CDATA[<blockquote><p>此教程是在：2.15版本的nasm + qemu-systrm-i386 + gdb下的调试</p></blockquote><h1 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h1><ol><li><strong>qemu启动</strong>：在一个terminal启动qemu：<br>qemu-system-i386 -s -S -hda hd.img -serial null -parallel stdio</li><li><strong>gdb启动</strong>：在另一个terminal启动gdb并且连接上qemu：<br>gdb<br>target remote:1234</li><li><strong>加载符号表</strong>：add-symbol-file xxx.symbol 0xffff<ul><li>在gdb之前<strong>生成符号表</strong>的操作：<ol><li>生成可重定位文件xxx.o：<br>nasm -o xxx.o -g -f elf32 xxx.asm</li><li>链接生成符号表和可执行文件：<br>ld -o xxx.symbol -melf_i386 -N xxx.o -Ttext 0xffff<br>ld -o xxx.bin -melf_i386 -N xxx.o -Ttext 0xffff –oformat binary</li></ol></li></ul></li><li><strong>设置断点</strong></li><li><strong>运行到断点</strong></li><li><strong>开始调试</strong></li></ol><h2 id="简化上述流程"><a href="#简化上述流程" class="headerlink" title="简化上述流程"></a>简化上述流程</h2><blockquote><p>配合makefile简化上述生成的流程</p></blockquote><p>makefile文件：</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token target symbol">run</span><span class="token punctuation">:</span>qemu-system-i386 -hda hd.img -serial null -parallel stdio <span class="token target symbol">debug</span><span class="token punctuation">:</span>qemu-system-i386 -s -S -hda hd.img -serial null -parallel stdio &amp;sleep 1gnome-terminal -e <span class="token string">"gdb -q -x gdbinit"</span><span class="token target symbol">build</span><span class="token punctuation">:</span>nasm -g -f elf32 mbr.asm -o mbr.old -o mbr.symbol -melf_i386 -N mbr.o -Ttext 0x7c00ld -o mbr.bin -melf_i386 -N mbr.o -Ttext 0x7c00 --oformat binarynasm -g -f elf32 bootloader.asm -o bootloader.old -o bootloader.symbol -melf_i386 -N bootloader.o -Ttext 0x7e00ld -o bootloader.bin -melf_i386 -N bootloader.o -Ttext 0x7e00 --oformat binarydd if<span class="token operator">=</span>mbr.bin of<span class="token operator">=</span>hd.img bs<span class="token operator">=</span>512 count<span class="token operator">=</span>1 seek<span class="token operator">=</span>0 conv<span class="token operator">=</span>notruncdd if<span class="token operator">=</span>bootloader.bin of<span class="token operator">=</span>hd.img bs<span class="token operator">=</span>512 count<span class="token operator">=</span>5 seek<span class="token operator">=</span>1 conv<span class="token operator">=</span>notrunc<span class="token target symbol">clean</span><span class="token punctuation">:</span>rm -fr *.bin *.o *.symbol<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>gdbinit文件</p><pre class="line-numbers language-none"><code class="language-none">target remote:1234set disassembly-flavor inteladd-symbol-file mbr.symbol 0x7c00add-symbol-file bootloader.symbol 0x7e00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>执行过程</strong>：<ol><li>make build</li><li>make debug</li><li>接着就可以下断点调试</li></ol></li></ul><h2 id="gdb常用命令"><a href="#gdb常用命令" class="headerlink" title="gdb常用命令"></a>gdb常用命令</h2><h4 id="1-下断点"><a href="#1-下断点" class="headerlink" title="1. 下断点"></a>1. 下断点</h4><ul><li>b *0x7c00：在<em>地址</em>下断点</li><li>b function：在<em>函数名</em>function下断点（可以是c函数，也可以是汇编函数名）</li><li>b filename:line：在对应<em>文件的对应行</em>下断点</li><li>i b：<em>查看</em>断点</li><li>d n：<em>删除</em>n号断点（配合i b使用）</li></ul><h4 id="2-继续运行"><a href="#2-继续运行" class="headerlink" title="2. 继续运行"></a>2. 继续运行</h4><ul><li>c：continue，执行到断点</li><li>s：step，单步进入（c）</li><li>n：next，单步跳过（c）</li><li>si：stepi，单步进入（汇编）</li><li>ni：nexti，单步跳过（汇编）</li></ul><h4 id="3-查看内容"><a href="#3-查看内容" class="headerlink" title="3. 查看内容"></a>3. 查看内容</h4><ol><li>查看当前文件、寄存器、内存的值<ul><li>l n：查看<strong>当前文件从第n行</strong>开始</li><li>i r：查看所有<strong>寄存器</strong>的值</li><li>x/FMT 0xffff：查看<strong>内存地址的值</strong>（FMT：<strong>单元个数+格式+大小</strong>；<strong>格式</strong>是一个字符，可以是o(octal), x(hex), d(decimal), u(unsigned decimal), t(binary), f(float), a(address), i(instruction), c(char), s(string)；<strong>大小</strong>是一个字符，可以是b(byte, 1 byte), h(halfword, 2 bytes), w(word, 4 bytes), g(giant, 8 bytes)）</li></ul></li><li><strong>layout</strong>查看<ul><li>layout src/r/asm：查看源代码/寄存器值/反汇编后的汇编代码</li><li>fs src/r/asm：focus到一个窗口（可用上下左右看对应窗口）</li><li>Ctrl+x a：退出到只剩gdb窗口</li><li>winheight src/r/asm +/- n：增长/缩短n行当前窗口</li></ul></li></ol><p>参考资料<a href="https://gitee.com/nelsoncheung/sysu-2023-spring-operating-system/tree/main/appendix/debug_with_gdb_and_qemu">qemu + gdb</a></p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gdb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test_my_site</title>
      <link href="/2023/03/21/test-my-site/"/>
      <url>/2023/03/21/test-my-site/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/03/21/hello-world/"/>
      <url>/2023/03/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
